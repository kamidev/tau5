name: Build
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
  workflow_dispatch:

jobs:
  build:
    name: "${{matrix.title}}"
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {
              title: "Windows x64",
              os: "windows-latest",
              cc: "vs2022",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "macOS ARM64",
              os: "macos-latest",
              cc: "clang",
              arch: "arm64",
              build_type: "Release",
            }
          - {
              title: "Linux x64 GCC",
              os: "ubuntu-latest",
              cc: "gcc",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "Linux x64 Clang",
              os: "ubuntu-latest",
              cc: "clang",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "Linux ARM64 GCC",
              os: "ubuntu-24.04-arm",
              cc: "gcc",
              arch: "arm64",
              build_type: "Release",
            }
          - {
              title: "Linux ARM64 Clang",
              os: "ubuntu-24.04-arm",
              cc: "clang",
              arch: "arm64",
              build_type: "Release",
            }

    steps:
      - uses: actions/checkout@v4

      # Install Qt 6
      - name: Install Qt 6
        uses: jurplel/install-qt-action@v4
        with:
          modules: "qtpositioning qtwebchannel qtwebengine qtwebsockets"
          version: "6.9.1"

      # Install Elixir (all platforms)
      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27"
          elixir-version: "1.18.2"

      # Install Linux build dependencies
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libevent-dev libminizip-dev
        if: startsWith(matrix.os, 'ubuntu')

      # Build Release - Windows
      - name: Build Release (Windows)
        working-directory: ${{github.workspace}}/bin/win
        shell: cmd
        run: build-release.bat
        if: startsWith(matrix.os, 'windows')

      # Build Release - macOS
      - name: Build Release (macOS)
        working-directory: ${{github.workspace}}/bin/mac
        run: ./build-release.sh
        if: startsWith(matrix.os, 'macos')

      # Build Release - Linux
      - name: Build Release (Linux)
        working-directory: ${{github.workspace}}/bin/linux
        run: ./build-release.sh
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cc == 'clang' && 'clang++' || 'g++' }}
        if: startsWith(matrix.os, 'ubuntu')

      # Server Tests - Windows (both x64 and ARM64)
      - name: BEAM Tests (Windows)
        shell: cmd
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'windows')

      # Server Tests - macOS
      - name: BEAM Tests (macOS)
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'macos')

      # Server Tests - Linux (both x64 and ARM64)
      - name: BEAM Tests (Linux)
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'ubuntu')

      # Release Health Checks
      # The --check flag now understands release builds
      
      - name: Release Health Check (Windows)
        shell: cmd
        working-directory: ${{github.workspace}}/release/
        run: |
          tau5.exe --check
          tau5-node.exe --check
        if: startsWith(matrix.os, 'windows')

      - name: Release Health Check (macOS)
        working-directory: ${{github.workspace}}/release/
        run: |
          Tau5.app/Contents/MacOS/Tau5 --check
          Tau5.app/Contents/MacOS/tau5-node --check
        if: startsWith(matrix.os, 'macos')

      - name: Release Health Check (Linux)
        working-directory: ${{github.workspace}}/release/Tau5-Linux/
        run: |
          ./tau5 --check
          ./tau5-node --check
        if: startsWith(matrix.os, 'ubuntu')