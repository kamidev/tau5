name: Build
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
  workflow_dispatch:

jobs:
  build:
    name: "${{matrix.title}}"
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {
              title: "Windows x64",
              os: "windows-latest",
              cc: "vs2022",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "macOS ARM64",
              os: "macos-latest",
              cc: "clang",
              arch: "arm64",
              build_type: "Release",
            }
          - {
              title: "Linux x64 GCC",
              os: "ubuntu-latest",
              cc: "gcc",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "Linux x64 Clang",
              os: "ubuntu-latest",
              cc: "clang",
              arch: "x64",
              build_type: "Release",
            }
          - {
              title: "Linux ARM64 GCC",
              os: "ubuntu-24.04-arm",
              cc: "gcc",
              arch: "arm64",
              build_type: "Release",
            }
          - {
              title: "Linux ARM64 Clang",
              os: "ubuntu-24.04-arm",
              cc: "clang",
              arch: "arm64",
              build_type: "Release",
            }

    steps:
      - uses: actions/checkout@v4

      # Install Qt 6
      - name: Install Qt 6
        uses: jurplel/install-qt-action@v4
        with:
          modules: "qtpositioning qtwebchannel qtwebengine qtwebsockets"
          version: "6.9.1"

      # Install Elixir (all platforms)
      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27"
          elixir-version: "1.18.2"

      # Install Linux build dependencies
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libevent-dev libminizip-dev
        if: startsWith(matrix.os, 'ubuntu')

      # Build Release - Windows
      - name: Build Release (Windows)
        working-directory: ${{github.workspace}}/bin/win
        shell: cmd
        run: build-release.bat
        if: startsWith(matrix.os, 'windows')

      # Build Release - macOS
      - name: Build Release (macOS)
        working-directory: ${{github.workspace}}/bin/mac
        run: ./build-release.sh
        if: startsWith(matrix.os, 'macos')

      # Build Release - Linux
      - name: Build Release (Linux)
        working-directory: ${{github.workspace}}/bin/linux
        run: ./build-release.sh
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cc == 'clang' && 'clang++' || 'g++' }}
        if: startsWith(matrix.os, 'ubuntu')

      # Install FUSE and deployment tools for AppImage support (Linux)
      - name: Install AppImage tools (Linux)
        run: |
          sudo apt-get update && sudo apt-get install -y fuse libfuse2
          
          if [[ "${{ matrix.arch }}" == "x64" ]]; then
            # Download pre-built linuxdeployqt for x64
            wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
            chmod +x linuxdeployqt-continuous-x86_64.AppImage
            sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            # Build linuxdeployqt from source for ARM64
            echo "Building linuxdeployqt from source for ARM64..."
            git clone https://github.com/probonopd/linuxdeployqt.git
            cd linuxdeployqt
            qmake
            make -j$(nproc)
            sudo cp bin/linuxdeployqt /usr/local/bin/
            cd ..
            rm -rf linuxdeployqt
          fi
        if: startsWith(matrix.os, 'ubuntu') && matrix.cc == 'gcc'

      # Build AppImage - Linux
      # Only build once per architecture using GCC for better compatibility
      # GCC-built binaries have better compatibility across different Linux distros
      - name: Build AppImage (Linux)
        working-directory: ${{github.workspace}}/bin/linux
        run: |
          ./build-appimage.sh --node-only
          ./build-appimage.sh
        if: startsWith(matrix.os, 'ubuntu') && matrix.cc == 'gcc'
      
      # Test AppImages can run
      - name: Test AppImages (Linux)
        working-directory: ${{github.workspace}}/release
        run: |
          # Test tau5-node AppImage
          for appimage in tau5-node-*.AppImage; do
            echo "Testing $appimage..."
            ./"$appimage" --check
          done
          # Test tau5 AppImage  
          for appimage in tau5-*.AppImage; do
            # Skip tau5-node AppImages (already tested above)
            if [[ "$appimage" != tau5-node-* ]]; then
              echo "Testing $appimage..."
              ./"$appimage" --check
            fi
          done
        if: startsWith(matrix.os, 'ubuntu') && matrix.cc == 'gcc'

      # Server Tests - Windows (both x64 and ARM64)
      - name: BEAM Tests (Windows)
        shell: cmd
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'windows')

      # Server Tests - macOS
      - name: BEAM Tests (macOS)
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'macos')

      # Server Tests - Linux (both x64 and ARM64)
      - name: BEAM Tests (Linux)
        working-directory: ${{github.workspace}}/server
        run: mix test
        if: startsWith(matrix.os, 'ubuntu')

      # Release Health Checks
      # The --check flag now understands release builds
      
      - name: Release Health Check (Windows)
        shell: cmd
        working-directory: ${{github.workspace}}
        run: |
          cd release\Tau5-for-Windows-*
          tau5.exe --check
          tau5-node.exe --check
        if: startsWith(matrix.os, 'windows')

      - name: Release Health Check (macOS)
        working-directory: ${{github.workspace}}
        run: |
          cd release/Tau5-for-macOS-*/
          ./Tau5.app/Contents/MacOS/Tau5 --check
          ./Tau5.app/Contents/MacOS/tau5-node --check
        if: startsWith(matrix.os, 'macos')

      - name: Release Health Check (Linux)
        working-directory: ${{github.workspace}}
        run: |
          cd release/Tau5-for-Linux-*/
          ./tau5 --check
          ./tau5-node --check
        if: startsWith(matrix.os, 'ubuntu')

      # Upload AppImages as artifacts (Linux GCC only)
      - name: Upload AppImage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: appimage-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            release/tau5-*.AppImage
            release/tau5-node-*.AppImage
        if: startsWith(matrix.os, 'ubuntu') && matrix.cc == 'gcc'